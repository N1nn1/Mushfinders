plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'maven-publish'
}

/* Setup */

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
tasks.withType(JavaCompile).configureEach { it.options.release = 17 }

def ENV = System.getenv()
String ver = "${project.version}+${project.github_branch}"
version = ENV.GITHUB_ACTIONS ? "${ver}.build.${ENV.GITHUB_RUN_NUMBER}" : ver

group = project.maven_group

/* Dependencies */

repositories {
	maven {
		name = 'Terraformers'
		url  = 'https://maven.terraformersmc.com/releases/'
	}

	maven {
		name = "Modding Playground"
		url  = 'https://raw.githubusercontent.com/moddingplayground/maven/main/'
	}

	maven {
		name = "Shedaniel"
		url  = 'https://maven.shedaniel.me/'
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.ver_minecraft}"
	mappings "net.fabricmc:yarn:${project.ver_minecraft}+build.${project.ver_yarn}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.ver_loader}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.ver_fabric}"

	// datagen
	modImplementation "net.moddingplayground.frame:frame-fabric:${project.ver_frame}"

	// utility
	modRuntimeOnly "com.terraformersmc:modmenu:${project.ver_mod_menu}"
}

/* Data Generation */

loom {
	runtimeOnlyLog4j = true

	runs {
		data {
			server()
			vmArgs(
					"-Dtoymaker.datagen=true",
					"-Dtoymaker.datagen.modid=${project.mod_id}",
					"-Dtoymaker.datagen.path=\"${project.file("src/generated/resources")};${project.file("$buildDir/resources/main")}\""
			)
		}
	}
}

sourceSets.main.resources { srcDirs += 'src/generated/resources' }

/* Resource Processing */

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

processResources {
	inputs.property 'version', version
	filesMatching('fabric.mod.json') { expand 'version': version }

	doLast {
		def start = System.currentTimeMillis()
		def minif = 0
		def bytes = 0
		fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
			File file = it
			minif++
			def oldLength = file.length()
			file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
			bytes += oldLength - file.length()
		}
		println('Minified ' + minif + ' json files. Saved ' + bytes + ' bytes. Took ' + (System.currentTimeMillis() - start) + 'ms.')
	}
}

jar { from('README.md', 'LICENSE', 'LICENSE_ASSETS') exclude('.cache') }

/* Publishing */

publishing { publications { mavenJava(MavenPublication) { from components.java } } }
